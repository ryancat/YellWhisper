{"version":3,"file":"YellWhisper.js","sources":["webpack:///webpack/bootstrap 99c87b8e986586b49de2","webpack:///./src/YellWhisper.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 99c87b8e986586b49de2","'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar logElement = document.getElementById('log');\n\nvar utils = {\n  log: function log(message) {\n    var messageElement = document.createElement('div');\n    messageElement.innerHTML = Date.now() + ': ' + message;\n    logElement.insertBefore(messageElement, logElement.firstElementChild);\n  },\n\n  traverseComponent: function traverseComponent(metaModel, callback) {\n    var key = void 0;\n    var stack = [metaModel];\n\n    while (stack.length) {\n      var model = stack.pop();\n      for (key in model) {\n        var value = model[key];\n        if (key !== 'component') {\n          if (key !== 'parent' && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n            stack.push(value);\n          }\n          continue;\n        }\n\n        if (callback(value, model)) {\n          return;\n        }\n      }\n    }\n  },\n\n  // getMetaModel: (component) => {\n  //   let resultMetaModel = null\n\n  //   utils.traverseComponent(YellWhisper._appMetaModel, (comp, containerObj) => {\n  //     if (comp !== component) {\n  //       return false\n  //     }\n\n  //     resultMetaModel = containerObj\n  //     return true\n  //   })\n\n  //   return resultMetaModel\n  // },\n\n  // getParentComponent: (component) => {\n  //   let componentMeta = utils.getMetaModel(component)\n  //   if (componentMeta && componentMeta.parent) {\n  //     return componentMeta.parent.component\n  //   }\n\n  //   return null\n  // },\n\n  getParentComponent: function getParentComponent(component) {\n    var componentParentId = component._parentId;\n    if (componentParentId) {\n      return YellWhisper._appMetaModelMap[componentParentId].component;\n    }\n\n    return null;\n  },\n\n  // getSiblingComponents: (component) => {\n  //   let componentMeta = utils.getMetaModel(component)\n  //   if (componentMeta && componentMeta.parent) {\n  //     let parentMeta = componentMeta.parent\n\n  //     if (parentMeta) {\n  //       return utils.getChildrenComponents(parentMeta.component).filter((siblingComponent) => siblingComponent !== component)\n  //     }\n  //   }\n\n  //   return null\n  // },\n\n  getSiblingComponents: function getSiblingComponents(component) {\n    var componentSiblingIds = component._siblingIds;\n    if (YellWhisper.utils.isArray(componentSiblingIds)) {\n      return componentSiblingIds.map(function (id) {\n        return YellWhisper._appMetaModelMap[id].component;\n      });\n    }\n\n    return null;\n  },\n\n  // getChildrenComponents: (component) => {\n  //   let componentMeta = utils.getMetaModel(component)\n  //   if (componentMeta && componentMeta.children) {\n  //     return componentMeta.children.map((childMeta) => childMeta.component)\n  //   }\n\n  //   return null\n  // },\n\n  getChildrenComponents: function getChildrenComponents(component) {\n    var componentChildrenIds = component._childrenIds;\n    if (YellWhisper.utils.isArray(componentChildrenIds)) {\n      return componentChildrenIds.map(function (id) {\n        return YellWhisper._appMetaModelMap[id].component;\n      });\n    }\n\n    return null;\n  },\n\n  isHtmlElement: function isHtmlElement(htmlElementToCheck) {\n    return htmlElementToCheck instanceof HTMLElement;\n  },\n\n  isString: function isString(stringToCheck) {\n    return typeof stringToCheck === 'string';\n  },\n\n  isArray: function isArray(arrayToCheck) {\n    return Array.isArray(arrayToCheck);\n  }\n\n  // isFunctionType: (functionToCheck) => {\n  //   return functionToCheck && Object.prototype.toString.call(functionToCheck) === '[object Function]'\n  // }\n};\n\nvar YellWhisperComponent = function () {\n  function YellWhisperComponent() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var container = arguments[1];\n\n    _classCallCheck(this, YellWhisperComponent);\n\n    this.props = props;\n    this.container = container;\n\n    // Add element wrapper into container\n    this.element = document.createElement('div');\n    this.element.classList.add('yellWisperComponent');\n    this.container.appendChild(this.element);\n\n    // We may need to have children container if component has children\n    this.childrenContainer = null;\n\n    // Try to render the first time\n    this._tryRender();\n\n    // Start to read message\n    window.requestAnimationFrame(this._tryReadMessage.bind(this));\n  }\n\n  _createClass(YellWhisperComponent, [{\n    key: 'yell',\n    value: function yell() {\n      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      message.type = YellWhisper.messageType.YELL;\n      message.meta = message.meta || {};\n\n      if (YellWhisper.debug) {\n        utils.log(this.constructor.name + ' yells: ' + message.info + ', ' + message.data);\n      }\n\n      var meta = message.meta;\n\n      // Yell to sibling components\n      // TODO: Should sibling hear?\n      // let siblingComponents = utils.getSiblingComponents(this)\n\n      // if (utils.isArray(siblingComponents)) {\n      //   meta.trace = meta.trace || []\n      //   meta.trace.push(this)\n      //   // siblingComponents.forEach((siblingComponent) => {\n      //   //   siblingComponent._willHear(info, data, meta)\n      //   // })\n\n      //   siblingComponents.forEach((siblingComponent) => {\n      //     siblingComponent._addMessage(message)\n      //   })\n      // }\n\n      // Yell to parent\n      var parentComponent = utils.getParentComponent(this);\n      if (parentComponent) {\n        meta.trace = meta.trace || [];\n        meta.trace.push(this);\n\n        // parentComponent._willHear(info, data, meta)\n        parentComponent._addMessage(message);\n      }\n    }\n  }, {\n    key: 'whisper',\n    value: function whisper() {\n      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      message.type = YellWhisper.messageType.WHISPER;\n      message.meta = message.meta || {};\n\n      if (YellWhisper.debug) {\n        utils.log(this.constructor.name + ' whispers: ' + message.info + ', ' + message.data);\n      }\n\n      var meta = message.meta,\n          childrenComponents = utils.getChildrenComponents(this);\n\n      if (utils.isArray(childrenComponents)) {\n        meta.trace = meta.trace || [];\n        meta.trace.push(this);\n        childrenComponents.forEach(function (childComponent) {\n          // childComponent._willHear(info, data, meta)\n          // childComponent.whisper(info, data)\n          childComponent._addMessage(message);\n        });\n      }\n    }\n\n    // overwrite\n    // hear function should be used when component needs to listen to any\n    // messages\n\n  }, {\n    key: 'hear',\n    value: function hear() {\n      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      utils.log(this.constructor.name + ' hears: ' + message.info + ', ' + message.meta);\n    }\n\n    /**\n     * Try to read message when possible\n     */\n\n  }, {\n    key: '_tryReadMessage',\n    value: function _tryReadMessage() {\n      var message = this._readMessage();\n\n      if (message) {\n        this._willHear(message);\n      }\n\n      window.requestAnimationFrame(this._tryReadMessage.bind(this));\n    }\n  }, {\n    key: '_willHear',\n    value: function _willHear(message) {\n      // Make sure component hears the message\n      this.hear(message);\n      this._tryRender();\n\n      // Make sure we yell or whisper accordingly\n      if (message.type === YellWhisper.messageType.YELL) {\n        // let parentComponent = utils.getParentComponent(this)\n        // if (parentComponent) {\n        //   parentComponent.yell(message)\n        // }\n\n        this.yell(message);\n      }\n\n      if (message.type === YellWhisper.messageType.WHISPER) {\n        // let childrenComponents = utils.getChildrenComponents(this)\n        // if (utils.isArray(childrenComponents)) {\n        //   childrenComponents.forEach((childComponent) => childComponent.whisper(message))\n        // }\n\n        this.whisper(message);\n      }\n    }\n  }, {\n    key: '_tryRender',\n    value: function _tryRender() {\n      if (this.shouldComponentRender()) {\n        // TODO: use virtual dom for better render performance\n        var renderResult = this.render();\n\n        if (utils.isString(renderResult)) {\n          this.element.innerHTML = renderResult;\n        } else if (utils.isHtmlElement(renderResult)) {\n          this.element.innerHTML = '';\n          this.element.appendChild(renderResult);\n        }\n      }\n    }\n\n    // overwrite\n    // render function should return DOM element or the inner HTML string for\n    // the current component. It has to be in a single root element\n\n  }, {\n    key: 'render',\n    value: function render() {\n      return '';\n    }\n\n    /**\n     * Set the hash id for component\n     */\n\n  }, {\n    key: '_setId',\n    value: function _setId(id) {\n      this._id = id;\n    }\n\n    /**\n     * Set the parent hash id\n     */\n\n  }, {\n    key: '_setParentId',\n    value: function _setParentId(id) {\n      this._parentId = id;\n    }\n\n    /**\n     * Set the sibling hash ids\n     */\n\n  }, {\n    key: '_setSiblingIds',\n    value: function _setSiblingIds() {\n      var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      this._siblingIds = ids;\n    }\n\n    /**\n     * Add id to children ids\n     */\n\n  }, {\n    key: '_addChildId',\n    value: function _addChildId(id) {\n      this._childrenIds = this._childrenIds || [];\n      this._childrenIds.push(id);\n    }\n  }, {\n    key: '_addMessage',\n    value: function _addMessage(message) {\n      if (message) {\n        this._messageQueue.push(message);\n      }\n    }\n  }, {\n    key: '_readMessage',\n    value: function _readMessage() {\n      return this._messageQueue.pop();\n    }\n  }, {\n    key: 'createChildrenContainer',\n    value: function createChildrenContainer() {\n      var childrenContainer = document.createElement('div');\n      childrenContainer.classList.add('yellWhisperChildrenContainer');\n      this.element.appendChild(childrenContainer);\n\n      return childrenContainer;\n    }\n\n    // Overwrite\n\n  }, {\n    key: 'shouldComponentRender',\n    value: function shouldComponentRender() {\n      return true;\n    }\n  }]);\n\n  return YellWhisperComponent;\n}();\n\nwindow.YellWhisper = {\n  debug: true,\n  utils: utils,\n  Component: YellWhisperComponent,\n  _componentCounter: 0,\n\n  messageType: {\n    YELL: 'YELL',\n    WHISPER: 'WHISPER'\n  },\n\n  registeredComponents: {},\n  /**\n   * The meta model tree which contains meta model\n   */\n  _appMetaModel: {},\n  /**\n   * The meta model map which maps key to meta model\n   */\n  _appMetaModelMap: {},\n  /**\n   * Register component so that it's available for init\n   */\n  registerComponent: function registerComponent(componentName, component) {\n    YellWhisper.registeredComponents[componentName] = component;\n  },\n  /**\n   * Decorate the given view model inside container\n   */\n  decorate: function decorate(viewModel, container) {\n    var metaModel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : YellWhisper._appMetaModel;\n\n    var componentModel = viewModel.component,\n        component = void 0;\n\n    if (componentModel) {\n      var componentName = componentModel.name,\n          componentClass = YellWhisper.registeredComponents[componentName];\n\n      if (componentClass) {\n\n        if (!metaModel.component) {\n          component = new componentClass(componentModel.props, container);\n          metaModel.component = component;\n          metaModel.componentName = componentName;\n          metaModel.id = ++YellWhisper._componentCounter;\n          YellWhisper._appMetaModelMap[metaModel.id] = metaModel;\n\n          component._setId(metaModel.id);\n          component._messageQueue = [];\n        } else {\n          component = metaModel.component;\n          // TODO: function setModel need to be implemented\n          component.setModel(componentModel.props, container);\n        }\n\n        // Make sure we always update parent id, in case parent changes\n        if (metaModel.parent) {\n          var parentMetaModel = metaModel.parent,\n              parentComponent = parentMetaModel.component;\n\n          component._setParentId(parentMetaModel.id);\n          component._setSiblingIds(parentMetaModel.children.map(function (childMeta) {\n            return childMeta.id;\n          }).filter(function (id) {\n            return id !== metaModel.id;\n          }));\n\n          if (parentComponent) {\n            parentComponent._addChildId(metaModel.id);\n          }\n        }\n      }\n    }\n\n    if (componentModel.children) {\n      var childrenContainer = component.childrenContainer || component.createChildrenContainer();\n      metaModel.children = [];\n      componentModel.children.forEach(function (childModel) {\n        var childMetaModel = {\n          parent: metaModel\n        };\n        metaModel.children.push(childMetaModel);\n        YellWhisper.decorate(childModel, childrenContainer, childMetaModel);\n      });\n    }\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/YellWhisper.js\n// module id = 0\n// module chunks = 0"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A","sourceRoot":""}